A.一般文件上传
new Q.Uploader({
    url:"api/upload.ashx",
    target: element,    //上传按钮,可为数组 eg:[element1,element2]
    view: element       //上传任务视图(若自己实现UI接口，则无需指定此参数)
});
B.图片上传
new Q.Uploader({
    url:"api/upload.ashx",
    target: element,    //上传按钮,可为数组 eg:[element1,element2]
    view: element,      //上传任务视图(若自己实现UI接口，则无需指定此参数)
    allows: ".jpg,.png,.gif,.bmp",
    //图片缩放
    scale: {
        //要缩放的图片格式
        types: ".jpg",
        //最大图片宽度（maxWidth）或高度（maxHeight）
        maxWidth: 1024
    }
});
C.完整API
new Q.Uploader({
    //--------------- 必填 ---------------
    url: "",            //上传路径
    target: element,    //上传按钮,可为数组 eg:[element1,element2]
    view: element,      //上传任务视图(若自己实现UI接口，则无需指定此参数)
    //--------------- 可选 ---------------
    html5: true,       //是否启用html5上传,若浏览器不支持,则自动禁用
    multiple: true,    //选择文件时是否允许多选,若浏览器不支持,则自动禁用(仅html5模式有效)
    clickTrigger:true, //是否启用click触发文件选择 eg: input.click()  =>  IE9及以下不支持
    auto: true,        //添加任务后是否立即上传
    data: {},          //上传文件的同时可以指定其它参数,该参数将以POST的方式提交到服务器
    dataType: "json",  //服务器返回值类型
    workerThread: 1,   //同时允许上传的任务数(仅html5模式有效)
    upName: "upfile",  //上传参数名称,若后台需要根据name来获取上传数据,可配置此项
    accept: "",        //指定浏览器接受的文件类型 eg:image/*,video/*  =>  IE9及以下不支持
    isDir: false,      //是否是文件夹上传（仅Webkit内核浏览器和新版火狐有效）
    allows: "",        //允许上传的文件类型(扩展名),多个之间用逗号隔开
    disallows: "",     //禁止上传的文件类型(扩展名)
    maxSize: 0,        //允许上传的最大文件大小,字节,为0表示不限(仅对支持的浏览器生效,eg: IE10+、Firefox、Chrome)
    //秒传+分片上传+断点续传,具体见示例（demo/slice.html）
    isSlice: false,               //是否启用分片上传，若为true，则isQueryState和isMd5默认为true
    chunkSize: 2 * 1024 * 1024,   //默认分片大小为2MB
    //查询路径为： url?action=query&hash=file hash
    isQueryState:false,           //是否查询文件状态（for 秒传或续传）
    isMd5: false,                 //是否计算上传文件md5值
    isUploadAfterHash:true,       //是否在Hash计算完毕后再上传
    sliceRetryCount:2,            //分片上传失败重试次数
    container:document.body,      //一般无需指定
    getPos: function(){ },        //一般无需指定
    //上传回调事件(function)
    on: {
        init: function(){ },              //上传管理器初始化完毕后触发
        select: function(task){ },        //点击上传按钮准备选择上传文件之前触发,返回false可禁止选择文件
        add: function(task){ },           //添加任务之前触发,返回false将跳过该任务
        upload: function(task){ },        //上传任务之前触发,返回false将跳过该任务
        hashProgress: function(task){ },  //文件hash进度（仅isMd5为true时有效）
        hash: function(task){ },          //查询状态之前触发（for 秒传或续传）
        sliceQuery: function(task){ },    //秒传查询之前触发
        sliceUpload: function(task){ },   //分片上传之前触发，返回false将跳过该分片
        send: function(task){ },          //发送数据之前触发,返回false将跳过该任务
        cancel: function(task){ },        //取消上传任务后触发
        remove: function(task){ },        //移除上传任务后触发
        progress: function(task){ },      //上传进度发生变化后触发(仅html5模式有效)
        complete: function(task){ }       //上传完成后触发
    },
    //UI接口(function),若指定了以下方法,将忽略默认实现
    UI:{
        init: function(){ },           //执行初始化操作
        draw: function(task){ },       //添加任务后绘制任务界面
        update: function(task){ },     //更新任务界面  
        over: function(){ }            //任务上传完成
    }
});
D.task属性说明
task = {
    id,         //任务编号
    name,       //上传文件名（包括扩展名）
    ext,        //上传文件扩展名
    size,       //上传文件大小（单位：Byte，若获取不到大小，则值为-1）
    input,      //上传控件
    file,       //上传数据（仅 html5）
    state,      //上传状态
    limited,    //若存在值，表示禁止上传的文件类型
    skip,       //若为true，表示要跳过的任务
    //分片上传
    sliceCount, //分片总数
    sliceIndex, //当前分片数
    sliceStart, //当前分片上传的起始点
    sliceEnd,   //当前分片上传的结束点
    sliceBlob,  //当前分片数据
    //上传后会有如下属性（由于浏览器支持问题，以下部分属性可能不存在）
    xhr,        //XMLHttpRequest对象（仅 html5）
    total,      //总上传大小（单位：Byte）
    loaded,     //已上传大小（单位：Byte）
    speed,      //上传速度（单位：Byte/s）
    avgSpeed,   //平均上传速度（仅上传完毕）
    startTime,  //开始上传的时间
    endTime,    //结束上传的时间（仅上传完毕）
    timeHash,   //文件hash所用时间（毫秒，仅当isMd5为true）
    time,       //上传所用时间（毫秒）
    deleted,     //若为true，表示已删除的文件
    //文件成功上传
    queryOK,     //仅秒传成功时为true
    response,    //服务器返回的字符串
    json         //response解析后的JSON对象(仅当 dataType 为json)
};